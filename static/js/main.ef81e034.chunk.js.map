{"version":3,"sources":["component/FeedbackOption/FeedbackOption.js","component/Section/Section.js","component/Statistic/Statistic.js","component/Container/Container.js","component/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Section","title","children","Statistic","good","neutral","bad","total","positivePercentage","Container","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","FeedbackOption","prevGood","prevNeutral","prevBad","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAuBeA,G,MAlBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,QCMII,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASJ,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBG,IACtBC,MCcQC,G,MAhBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,+BACE,qBAAIV,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,oBAA6BS,KAC7B,qBAAIT,UAAU,OAAd,gCAAyCU,EAAzC,YCASC,G,MARG,SAAC,GAAkB,IAAhBP,EAAe,EAAfA,SACnB,OAAO,qBAAKJ,UAAU,YAAf,SAA4BI,MCOtBQ,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGb,UAAU,UAAb,SAAwBa,MCiElBC,MA3Df,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNT,EADM,KACAU,EADA,OAEiBD,mBAAS,GAF1B,mBAENR,EAFM,KAEGU,EAFH,OAGSF,mBAAS,GAHlB,mBAGNP,EAHM,KAGDU,EAHC,KAyBPC,EAAqB,WACzB,OAAOb,EAAOC,EAAUC,GAOxB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAACiB,EAAD,CACEzB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCQ,SAAAE,GAChB,OAAQA,GACN,IAAK,OACHkB,GAAQ,SAAAK,GAAQ,OAAIA,EAAW,KAC/B,MAEF,IAAK,UACHJ,GAAW,SAAAK,GAAW,OAAIA,EAAc,KACxC,MAEF,IAAK,MACHJ,GAAO,SAAAK,GAAO,OAAIA,EAAU,KAC5B,MAEF,QACE,aAoBA,cAAC,EAAD,CAASpB,MAAM,aAAf,SACGgB,IACC,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAlBHc,KAAKC,MAAOnB,EAAOa,IAAwB,MAAQ,IAqBlD,cAAC,EAAD,CAAcN,QAAQ,4BCjDnBa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef81e034.chunk.js","sourcesContent":["import React from 'react';\nimport '../FeedbackOption/FeedbackOptions.css';\nimport T from 'prop-types';\n\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button\n      type=\"button\"\n      className=\"btn\"\n      key={option}\n      onClick={() => onLeaveFeedback(option)}\n    >\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: T.arrayOf(T.string.isRequired),\n  onLeaveFeedback: T.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import T from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"section\">\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: T.string.isRequired,\n  children: T.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport T from 'prop-types';\nimport '../Statistic/Statistic.css';\n\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      <li className=\"text\">Good: {good}</li>\n      <li className=\"text\">Neutral: {neutral}</li>\n      <li className=\"text\">Bad: {bad}</li>\n      <li className=\"text\">Total: {total}</li>\n      <li className=\"text\">Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n};\n\nStatistic.propTypes = {\n  label: T.string.isRequired,\n  value: T.number.isRequired,\n};\nexport default Statistic;\n","import T from 'prop-types';\nimport '../Container/Container.css';\n\nconst Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>;\n};\n\nContainer.propTypes = {\n  children: T.node.isRequired,\n};\n\nexport default Container;\n","import T from 'prop-types';\nimport '../Notification/Notification.css';\n\nconst Notification = ({ message }) => {\n  return <p className=\"message\">{message}</p>;\n};\n\nNotification.propTypes = {\n  message: T.string.isRequired,\n};\n\nexport default Notification;\n","\nimport { useState } from 'react';\nimport FeedbackOptions from './component/FeedbackOption/FeedbackOption';\nimport Section from './component/Section/Section';\n\n\nimport Statistic from './component/Statistic/Statistic';\nimport Container from './component/Container/Container';\nimport Notification from './component/Notification/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  \n\nconst addFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevGood => prevGood + 1)\n        break;\n      \n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1)\n        break;\n      \n      case 'bad':\n        setBad(prevBad => prevBad + 1)\n        break;\n    \n      default:\n        return\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100) || 0;\n  }  \n    \n    return (\n      <Container>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {countTotalFeedback() ? (\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            ></Statistic>\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </Container>\n    );\n}\n\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}